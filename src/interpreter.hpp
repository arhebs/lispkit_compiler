#ifndef INTERPRETER_HPP
#define INTERPRETER_HPP

#include <vector>
#include <set>
#include <algorithm>
#include <memory>
#include <fstream>
#include <unordered_map>
#include <functional>
#include <stack>
#include <ranges>
#include <iterator>

#include "AST.hpp"

#include "scanner.hpp"

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "parser.hpp"

namespace yy {

// forward declare our simplistic AST node class so we
// can declare container for it without the header

/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal 
 * references.
 * 
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */
class Interpreter
{
public:
    explicit Interpreter(std::istream* inp = nullptr);
    /**
     * Run parser. Results are stored inside.
     * \returns 0 on success, 1 on failure
     */
    int parse();
    /**
     * Switch scanner input stream. Default is standard input (std::cin).
     * It will also reset AST.
     */
    void switch_streams(std::istream* is, std::ostream* os = nullptr);

    void set_file_name(const std::string& str);

    bool is_error();
    
    /**
     * This is needed so that Scanner and Parser can call some
     * methods that we want to keep hidden from the end user.
     */
    friend class Parser;
    friend class Scanner;

    AST_node& get_AST();

    void execute();

    void execute_secd();

    void compile();

    bool check_number_of_arguments;
private:
    using command = std::function<AST_node(AST_node&, std::unordered_map<std::string, AST_node>)>;
    using context_t = std::unordered_map<std::string, AST_node>;
    using enviroment_t = std::list<std::list<std::string>>;
    // Used internally by Scanner YY_USER_ACTION to update location indicator
    void increaseLocation(unsigned int loc, unsigned int lineno);

    void next_line();

    yy::position current_pos();
    
    // Used to get last Scanner location. Used in error messages.
    unsigned int location() const;

    AST_node execute(AST_node& current, std::unordered_map<std::string, AST_node> context);

    AST_node execute_secd_internal();

    std::string compile(AST_node& current, AST_node enviroment);

    bool is_existing_symbol(const std::string& symbol, const context_t& context);

    std::runtime_error report_runtime_error(std::string command, AST_node& node, std::string error_description);

    void report_runtime_warning(std::string command, AST_node& node, std::string error_description);
private:
    Scanner m_scanner;
    Parser m_parser;
    unsigned int m_location;          // Used by scanner
    unsigned int m_lineno;
    unsigned int m_column;
    std::unordered_map<std::string, command> functions;
    bool m_error;
    AST_node AST;
    std::istream* input_stream;
    std::ostream* output_stream;
    std::string file_name = "input";
};

}

#endif // INTERPRETER_HPP
